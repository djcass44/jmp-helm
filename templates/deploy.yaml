apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name.api }}
spec:
  replicas: {{ .Values.replicas.api }}
  selector:
    matchLabels:
      app: {{ .Values.name.api }}
  template:
    metadata:
      labels:
        app: {{ .Values.name.api }}
    spec:
      automountServiceAccountToken: false
      #securityContext:
      #  fsGroup: 1000
      #  runAsUser: 1000
      #  runAsGroup: 1000
      {{ if .Values.fs.claimName.api }}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Values.fs.claimName.api }}
      {{ end }}
      containers:
      - env:
        - name: DRIVER_CLASS
          value: {{ .Values.db.driver }}
        - name: DRIVER_URL
          value: {{ .Values.db.url }}
        - name: DRIVER_USER
          valueFrom:
            secretKeyRef:
              name: jmp-db
              key: username
        - name: DRIVER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: jmp-db
              key: password
        - name: BASE_URL
          value: {{ .Values.app.url }}
        - name: LOG_DIRECTORY
          value: "/data"
        - name: JMP_HOME
          value: "/data"
        image: "{{ .Values.image.repository }}/{{ .Values.image.image.api }}:{{ .Values.image.tag.api }}"
        imagePullPolicy: Always
        name: {{ .Values.name.api }}
        ports:
        - containerPort: {{ .Values.port.api }}
        {{ if .Values.fs.claimName.api }}
        volumeMounts:
        - mountPath: "/data"
          name: data
        {{ end }}
        readinessProbe:
          httpGet:
            path: /api/v3/health
            port: {{ .Values.port.api }}
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          runAsNonRoot: true
          privileged: false
          capabilities:
            drop:
              - all
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name.ui }}
spec:
  replicas: {{ .Values.replicas.ui }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 50%
  selector:
    matchLabels:
      app: {{ .Values.name.ui }}
  template:
    metadata:
      labels:
        app: {{ .Values.name.ui }}
    spec:
      automountServiceAccountToken: false
      # securityContext:
      #   fsGroup: 1000
      #   runAsUser: 1000
      #   runAsGroup: 1000
      volumes:
      - name: tmp
        emptyDir: {}  
      containers:
      - image: "{{ .Values.image.repository }}/{{ .Values.image.image.ui }}:{{ .Values.image.tag.ui }}"
        imagePullPolicy: Always
        name: {{ .Values.name.ui }}
        ports:
        - containerPort: 80
        volumeMounts:
        - name: tmp
          mountPath: /var/tmp/nginx
        livenessProbe:
          httpGet:
            path: /probe
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /probe
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          runAsNonRoot: true
          privileged: false
          # capabilities:
            # drop:
              # - all
            # add:
              # - CHOWN
              # - FOWNER
          readOnlyRootFilesystem: false # this should be true
          allowPrivilegeEscalation: false
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      restartPolicy: Always